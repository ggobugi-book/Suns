c <- 1
clean
claer
claer()
rm(list = ls())
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
test <- read.table(file = "./test.txt")
test <- read.table(file = "./test.txt",header = TRUE, sep = " ")
test <- readline(file = "./test.txt",header = TRUE, sep = " ")
test <- "  범은 착하고도 효성스러우며, 문채롭고도 싸움을 잘한다. 인자하고도 효성스러우며, 슬기롭고도 어질다. 씩씩하고도 날래며, 세차고도 사납다. 그야말로 천하에 대적할 자가 없다.
그러나 비위는 범을 잡아먹고, 범우도 범을 잡아 먹는다. 박(駁)도 범을 잡아먹고, 오색사자는 큰 나무가 선 산꼭대기에서 범을 잡아먹는다. 자백도 범을 잡아먹고, 표견은 날면서 범과 표범을 잡아먹는다. 황요는 범과 표범의 염통을 꺼내어 먹는다. 활(猾)은 범과 표범에게 일부러 삼켜졌다가 그 뱃속에서 간을 뜯어 먹고, 추이(酋耳)는 범을 만나기만 하며 곧 찢어서 먹는다. 범이 맹용을 만나면 눈을 꼭 감고, 감히 뜨지도 못한다. 그런데 사람이 맹용을 두려워하지 않으면서도 범은 두려워 하니, 범의 위풍이 얼마나 엄한가.
범이 개를 먹으면 취하고, 사람을 먹으면 조화를 부리게 된다. 범이 한 번 사람을 먹으면, 그 창귀가 굴각(屈閣)이 되어 범의 겨드랑이에 붙어산다. 굴각이 범을 남의 집 부엌으로 이끌어 들여서 솥전을 핥으면, 그 집주인이 갑자기 배고픈 생각이 나서 한밤중이라도 아내더러 밥을 지으라고 시키게 된다. 범이 두 번째로 사람을 먹으련, 그 창귀가 이올(彛兀)이 되어 범의 광대뼈에 붙어산다. 이올은 높은 데 올라가서 사냥꾼의 움직임을 살피는데, 만약 깊은 골짜기에 함정이나 묻힌 화살이 있으면 먼저 가서 그 틀을 벗겨 놓는다. 범이 세번째로 사람을 먹으면, 그 창귀가 육혼(　渾)이 되어 범의 턱에 붙어산다. 육혼은 자기가 평소에 알던 친구들의 이름을 자꾸만 불러댄다.
하루는 범이 창귀들에게 분부를 내렸다. "
# 아래 결과가 나와야 합니다.
extractNoun(test)
#> [1] "한글"   "테스트"
table(test)
#> [1] "한글"   "테스트"
table(extractNoun(test))
install.packages('KoNLP')
library(KoNLP)
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_91')
useSejongDic()
sentence <- '아버지가 방에 스르륵 들어가신다.'
extractNoun(sentence)
mergeUserDic(data.frame(c('스르륵'),c('mag')))
extractNoun(sentence)
getwd()
sewd("C:/Users/student/Documents/GitHub/TIL/PYTHON/test")
setwd("C:/Users/student/Documents/GitHub/TIL/PYTHON/test")
sentence <- read.table(file = "test.txt", header = TRUE, sep = " ")
sentence <- read.table(file = "test.txt")
sentence <- read.table(file = "test.txt", header = TRUE, sep = " ")
sentence <- readLines("test.txt")
extractNoun(sentence)
mergeUserDic(data.frame(c('스르륵'),c('mag')))
extractNoun(sentence)
sentence <- readLines("test.txt")
extractNoun(sentence)
useSejongDic()
sentence <- readLines("test.txt")
extractNoun(sentence)
Sys.getlocale()
Sys.setlocale("LC_ALL", "en_US.UTF-8")
options(encoding = 'UTF-8')
sentence <- readLines("test.txt")
extractNoun(sentence)
install.packages("tm")
install.packages("readr")
library(tm) # Text Mining에 필요한 패키지
library(readr) # 파일작성에 필요한 패키지
# 1. 분석하고자 하는 코퍼스를 읽어옴
corpus = readRDS(file = "./test")
install.packages("tm")
getwd()
setwd("C:/Users/student/Documents/GitHub/TIL/PYTHON/test")
# 1. 분석하고자 하는 코퍼스를 읽어옴
corpus = readRDS(file = "./test")
# 1. 분석하고자 하는 코퍼스를 읽어옴
corpus = readRDS(file = "./test.txt")
install.packages('KoNLP')
library(KoNLP)
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_91')
useSejongDic()
sentence <- readLines("test.txt")
sentence <- readLines("test.txt")
extractNoun(sentence)
mergeUserDic(data.frame(c('스르륵'),c('mag')))
extractNoun(sentence)
# 2. 코퍼스 기반으로 DTM을 생성, 이때 weighting 파라미터에 TF-IDF 함수 추가
kwdDTM_TF = DocumentTermMatrix(sentence, control=list(wordLengths=c(2,Inf),
weighting = function(x) weightTfIdf(x, normalize = TRUE)))
# 2. 코퍼스 기반으로 DTM을 생성, 이때 weighting 파라미터에 TF-IDF 함수 추가
kwdDTM_TF = DocumentTermMatrix(sentence, control=list(wordLengths=c(2,Inf),
weighting = function(x) weightTfIdf(x, normalize = TRUE)))
# 3. removeSparseTerms 수행
kwdDTM_TF = removeSparseTerms(kwdDTM_TF, as.numeric(0.999))
# 2. 코퍼스 기반으로 DTM을 생성, 이때 weighting 파라미터에 TF-IDF 함수 추가
kwdDTM_TF = DocumentTermMatrix(sentence, control=list(wordLengths=c(2,Inf),
weighting = function(x) weightTfIdf(x, normalize = TRUE)))
typeof(sentence)
# 2. 코퍼스 기반으로 DTM을 생성, 이때 weighting 파라미터에 TF-IDF 함수 추가
kwdDTM_TF = DocumentTermMatrix(extractNoun(sentence), control=list(wordLengths=c(2,Inf),
weighting = function(x) weightTfIdf(x, normalize = TRUE)))
help(DocumentTermMatrix)
